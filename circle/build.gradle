buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.4'
    }
}

repositories {
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
}

apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'

def buildInfo() {
    if ('git status --short'.execute().text.trim().length() == 0)
        return 'git rev-parse --short HEAD'.execute().text.trim() + "-" + userName()
    else
        return "private-" + userName()
}

def userName() {
    return System.properties["user.name"]
}

def getVersionName(){
    return VERSION_NAME +"-" + buildInfo()
}

def getVersionCode(){
    return VERSION_CODE.toInteger()
}

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    defaultConfig {
        applicationId "com.jadenine.circle"
        versionCode getVersionCode()
        versionName getVersionName()

        minSdkVersion 17
        targetSdkVersion 22
    }

    signingConfigs {
        debug {
            storeFile file(getRootDir().absolutePath + "/debug.keystore")
        }

        release{
            storeFile file(getRootDir().absolutePath + "/debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.release
        }
    }

    def CHANNELS = ["Jadenine"]

    productFlavors {
        CHANNELS.each {name ->
            "$name" {
                resValue "string", "umeng_channel", name
            }
        }
    }

    lintOptions {
        abortOnError false
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            output.outputFile = new File(
                    output.outputFile.parent,
                    output.outputFile.name.replace(".apk", "-"+getVersionName()+".apk"))
        }
    }

    packagingOptions {
        exclude 'LICENSE.txt'
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:22.2.0'
    compile 'com.android.support:design:22.2.0'
    compile 'com.android.support:recyclerview-v7:22.2.0'
    compile 'com.android.support:cardview-v7:22.2.0'
    compile 'com.android.support:palette-v7:22.2.0'

    compile 'com.google.dagger:dagger:2.0'
    apt 'com.google.dagger:dagger-compiler:2.0'
    provided 'org.glassfish:javax.annotation:10.0-b28'

    compile 'com.squareup.retrofit:retrofit:1.9.0'
    compile 'com.squareup.mortar:mortar:0.17'
    compile 'com.squareup.flow:flow:0.10'
    compile 'com.squareup.flow:flow-path:0.10'

    compile 'com.squareup:otto:1.3.7'
    compile 'io.reactivex:rxjava:1.0.11'
    compile 'io.reactivex:rxandroid:0.24.0'

    compile 'com.jakewharton:butterknife:6.1.0'

    compile 'com.umeng.analytics:analytics:5.5.3'

    androidTestCompile 'com.android.support:support-annotations:22.2.0'
    androidTestCompile 'com.android.support.test:runner:0.3'
    androidTestCompile 'com.android.support.test:rules:0.3'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2'
    androidTestCompile 'com.android.support.test.espresso:espresso-contrib:2.2'
    androidTestCompile 'com.android.support.test.espresso:espresso-intents:2.2'
}


if (new File(getRootDir(), "signing.gradle").exists()) {
    apply from: getRootDir().absolutePath + "/signing.gradle"
}